Requirements:
Excess money must be deposited in a Bank
The restaurant must have working capital for the day
Workers in the restaurant are paid

Assumption:
Both working capital and bank balance could be negative:
Working capital is like a credit card with some pre deposit. (it gets turned into negative when cashier doesn’t have enough money pay the market)
Bank balance is like a bank account, a negative bank balance means there’s a loan

At the end of a day, cashier first calculate the total amount he needs to pay workers, then add the minimum working capital (500) to it and get a number N.
If current working capital > N, pay workers and deposit the excess money
If current working capital < N but (bank balance + current working capital) >= N,
	Withdraw and pay
If current working capital < N and (bank balance + current working capital) < N,
	Withdraw all the money, Request a loan from bank,
	If loan is granted (msgGrantALoan), pay workers
	If loan is refused (msgRefuseALoan), DOES NOT pay workers and deposit excess money if there is any

Pseudo code:
RestaurantPanel.java
Double min_working_capital, working_capital, bank_balance;
Double waiter_salary, cook_salary, host_salary, cashier_salary;
getters and setters for each

RestaurantCashierRole.java
Double min_working_capital, working_capital, bank_balance;
Double waiter_salary, cook_salary, host_salary, cashier_salary;
Semaphore depositCompleted, withdrawalCompleted;
Boolean loanRequested, loanGranted, loanRefused;
List<WaiterRoles> waiters;
List<CookRoles> cooks;

restaurantCashierRole (String name, restaurantPanel rp) {
	this.name = name;
	min_working_capital = rp.getMinWorkingCapital();
	working_capital = rp.getWorkingCapital();
	bank_balance = rp.getBankBalance();
}

messages:
depositCompleted(double amount){
	working_capital -= amount;
	bank_balance += amount;
	depositCompleted.release();
}
withdrawalCompleted(double amount){
	working_capital += amount;
	bank_balance -= amount;
	withdrawalCompleted.release();
}
loanGranted(double amount) {
	working_capital += amount;
	bank_balance -= amount;
	loanGranted = true;
}
loanRefused(){
	loanRefused = true;
}

Scheduler:
// other scheduler rules
if (loanRequested and loanGranted) {
	payWorkers();
	closeRestaurant();
}
if (loanRequested and loanRefused) {
	depositExcessMoney();
	closeRestaurant();	
}
if (onClose) {
	prepareToClose();
}

Actions:
prepareToClose() {
	double total = getTotalSalary() + min_working_capital;
	If working_capital >= total {
		payWorkers(); 
		depositExcessMoney();		
		closeRestaurant();
	}
	else if (bank_balance + working_capital) >= total {
		bank.withdraw(total - working_capital);
		bank.withdrawalCompleted.acquire();
		payWorkers();
		closeRestaurant();
	}
	else {
		bank.withdraw(bank_balance);
		bank.withdrawalCompleted.acquire();
		bank.requestALoan(total - working_capital);
		loanRequested = true;
}

payWorkers() {
	working_capital -= getTotalSalary();
	for every waiterRole w in waiters
		w.getPerson().getPaid (waiter_salary);
	for every cookRole c in cooks
		c.getPerson().getPaid (cook_salary);
	host.getPerson().getPaid(host_salary);
	this.getPerson().getPaid(cashier_salary);
}

closeRestaurant() {
	rp.setWorkingCapital (working_capital);
	rp.setBankBalance (bank_balance);
	requestedALoan = false;
	loanGranted = false;
	loanRefused = fals e;
	onClose = false;
	//deactivate roles;
}

double getTotalSalary() {
	return waiters.size * waiter_salary + cooks.size * cook_salary + host_salary + cashier_salary;
}

depositExcessMoney() {
	if working_capital - min_working_capital >0,
		bank.deposit(working_capital - min_working_capital);
		depositCompleted.acquire();
}
shared-data between cook and waiter:
in RestaurantPanel.java:
class Order {
	int table;
	String food;
	SpecialWaiterRole waiter;
	Order (int t, String f,SpecialWaiterRole w) {
		table  = t;
		food = f;
		waiter = w;
	}
}

class CookWaiterMonitor extends Object {
	private List<Order> orders;
	synchronized public void addOrder (int table, String food, SpecialWaiterRole waiter) {
		orders.add (new Order (table, food, waiter))
		cook.notify();
	}
	synchronized public Order removeOrder () {
		while (orders.size = 0)
			try {cook.wait(5000);} catch (InterruptedException ex) {};
		Order temp;
		temp = orders.firstElement();
		orders.removeElementAt(0);
		return temp;
	}
}

public CookWaiterMonitor theMonitor;
CookRole c = new CookRole (“cook”, theMonitor);
SpecialWaiterRole w = new SpecialWaiterRole(name, theMonitor);
// constructors need to be changed respectively–

Abstract Class WaiterRole extends Role {
	// same data
	// same message
	// same actions except for placeOrder(MyCustomer customer)
}
public class NormalWaiterRole extends WaiterRole implements Waiter {
	// this is the normal type of waiter that we’ve been working on so far
	// everything remains the same.
}
public class SpecialWaiterRole extends WaiterRole implements Waiter {
	// same message and scheduler rules as the NormalWaiterAgent
	// Action placeOrder needs to be changed:
	public void placeOrder(MyCustomer customer) {
		print ("Here's an order for table " + customer.tableNumber);
		cook.msgHereIsAnOrder (customer.choice, this, customer.tableNumber);
		theMonitor.addOrder(customer.table, customer.food, this);
		customer.state = customerState.waitingForFood;
	}
}
in CookRole.java:
private class MyOrder {
		WaiterRole waiter; (if this doesn’t work, have both waiter types in the class)
		int tableNumber;
		String food;
		OrderState state;
		public MyOrder (String f, WaiterRole w, int t) {
			food = f;
			waiter = w;
			tableNumber = t;
			state = OrderState.PENDING;
		}
	}
public Boolean pickAndExecuteAnAction() {
	// import Order class from restPanel
	Order order = new Order(theMonitor.removeOrder());
	// other scheduler rules
	if (order) {
		orders.add(new myOrder(order.table, order.food, order.waiter))
		return true; 
	}
} 