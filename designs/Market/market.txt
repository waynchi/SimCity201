EMPLOYEE

Data
------
Enum orderState = {New,OrderFulfilled,ReadyToPay,CheckDelivered,PaymentReceived,OrderPaid,DeliveringChange}
List<Order> orders;
List<Checks> checks;
Class Order {
	enum state;
	List<Item> items;
	double totalDue;
	double totalPaid;
	double totalChange;
	Customer customer;

}
Class Item {
	String name;
	int xPos;
	int yPos;
	double price;
}


Messages
-------
msgHereIsAnOrder(List<Integer>chosenItems) {
	newOrder = new Order(order);
	newOrder.state = orderState.New;
	for(item in chosenItems) {
		newOrder.items.add(item);
	}
	orders.add(newOrder);
}
msgHereIsPayment(double amount, order) {
	order.totalPaid = order.totalPaid;
	order.state = orderState.PaymentReceived;		
}
msgHereIsChange(double change, order) {
	order.totalChange = change;
	order.state = orderState.DeliveringChange;
}

Scheduler
-----
for order in orders {
	if order.state = orderState.New {
		getOrder(order);
	}
	if order.state = orderState.OrderFulfilled {
		giveOrderToCustomer(order);
	}
	if order.state = orderState.ReadyToPay {
		giveCheckToCustomer(order);
	}
	if order.state = orderState.PaymentReceived {
		getChangeFromCashier(order);
	}
	if(order.state = orderState.DeliveringChange) {
		deliverChangeToCustomer(order);
	}
}

Actions
-----
getOrder(Order order) {
	for item in order.items {
		DoGetItem(order.posX,order.posY);
	}
	order.state = OrderFulfilled;

}

giveOrderToCustomer(order) {
	DoGoToCustomer();
	order.customer.msgHereIsYourOrder(order.items);
	order.state = ReadyToPay;
}


giveCheckToCustomer(Order order) {
	for item in order.items {
		double totalDue = totalDue + item.price;
	}
	order.totalDue = totalDue;
	DoGoToCashier();
	order.customer.msgHereIsWhatIsDue(order.customer,totalDue);
	order.state = CheckDelivered;
}
getChangeFromCashier(order) {
	DoGoToCashier();
	cashier.msgHereIsPayment(order.totalPaid, order.totalDue, this);
	order.state = OrderPaid;
}
deliverChangeToCustomer(order) {
	DoGoToCustomer();
	order.customer.msgHereIsChange(order.totalChange);
	orders.remove(order);
}