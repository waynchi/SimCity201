class RepairMan extends Resident{
	// The salaryTimer puts salary into homeMoney after salaryTime
	// milliseconds. This has to be implemented.
	// The Person has to send two separate messages to shutdown job
	// the repairman and shut down his Resident role.

	// Data
	List<MyHouse> houses;
	Timer salaryTimer;
	double salary;
	double money;
	double homeMoney;
	int salaryTime;
	List<Item> myBrokenItems;
	boolean isJobActive;

	//-----------------------------------------------------------//

	// Actions

	goToHouse(MyHouse mh) {
		DoGoToHouse(mh);
		if (mh.isLocked) {
			mh.s = ToBeRechecked;
			GoBack();
			mh.recheck.schedule(new Timertask() {
				run() {
					timeToRecheck(mh);
				}
			}, 5000);
		}
		else {
			mh.r.ImHere();
			mh.s = Reached;
		}
	}

	repairItems(MyHouse mh) {
		for (Item i : brokenItems) {
			i.repair();
		}
		mh.s = DoneRepairing;
		mh.r.repairDone();
		mh.brokenItems = null;
	}

	repairMyHomeItems() {
		for (Item i : myBrokenItems) {
			i.repair();
		}
	}

	//-----------------------------------------------------------//

	// Messages

	needHelp(House h) {
		MyHouse mh = find(h);
		mh.s = NeedsRepair;
	}

	thingsAreBroken(House h, List<Item> brokenitems) {
		MyHouse mh = find(h);
		mh.brokenItems = brokenItems;
		mh.s = ItemsGiven;
	}

	thankYou(House h) {
		MyHouse mh = find(h);
		mh.s = None;
	}

	timeToRecheck(MyHouse mh) {
		mh.s = NeedsRepair;
	}

	salaryArrives() {
		homeMoney += salary;
	}

	myItemBroke(Item i) {
		myBrokenItems.add(i);
	}

	//-----------------------------------------------------------//

	// Scheduler
	if (isJobActive == true) {
		if there is a MyHouse mh st mh.s = ItemsGiven
			repairItems(mh)
		if there is a MyHouse st mh.s = NeedsRepair
			goToHouse(mh);
		if myBrokenItems is not empty
			repairMyHomeItems();
	}
	else {
		super.pickAndExecuteAnAction();
	}

	//-----------------------------------------------------------//

	// Utilities

	// Ensure thread safety for homeMoney.
	pickUpSalaryMoney() {
		money += homeMoney;
		homeMoney = 0;
	}

	//-----------------------------------------------------------//

	// Helper Data Structures

	class MyHouse {
		House h;
		Resident r;
		List<Item> brokenItems;
		HouseState s;
		Timer recheck;
	}

	enum HouseState {None, NeedsRepair, ToBeRechecked, Reached, ItemsGiven, DoneRepairing};
}
