class Resident extends Role {
	// Data

	House house;
	RepairMan repairMan;
	RepairState repairState = None;
	State myState;
	Semaphore busy = new Semaphore(0, true);

	//-----------------------------------------------------------//

	// Actions

	callRepairMan() {
		repairMan.needHelp(house);
		repairState = HelpRequested;
	}

	giveBrokenItems(List<Item> brokenItems) {
		repairMan.thingsAreBroken(house, brokenItems);
		repairState = BeingRepaired;
	}

	thankRepairMan() {
		repairMan.thankYou(house);
		repairState = None;
	}

	cookAtHome() {
		myState = Cooking;
		// Animation implementation.
	}

	eatFood() {
		myState = Eating;
		// Animation implementation.
	}

	sleep() {
		myState = Sleeping;
		// Animation implementation.
	}

	//-----------------------------------------------------------//

	// Messages

	somethingBroke() {
		if (repairState == None)
			repairState = NeedsRepair;
	}

	ImHere() {
		repairState = RepairManIsHere;
	}

	repairDone() {
		repairState = RepairDone;
	}

	eatAtHome() {
		myState = WantToCook;
	}

	foodCooked() {
		myState = FoodCooked;
	}

	activityComplete() {
		busy.release();
	}

	eatAtRestaurant() {
		myState = WantToEatAtRestaurant;
	}

	doneEating() {
		myState = Idle;
		activityComplete();
	}

	//-----------------------------------------------------------//

	// Scheduler

	if (!(this instanceof RepairMan)) {
		if repairState = RepairDone
			thankRepairMan();
		if repairState = RepairManIsHere
			giveBrokenItems(List<Item> brokenItems);
		if there exists a broken item and repairState = (NeedsRepair || None) && myState != Sleeping
			callRepairMan();
	}
	if (myState == FoodCooked)
		eatFood();
	if (myState == WantToCook && grill is not broken)
		cookAtHome();
	if (myState == WantToSleep && repairState != (RepairManIsHere || BeingRepaired || RepairDone))
		sleep();

	//-----------------------------------------------------------//

	// Helper Data Structures

	enum RepairState {None, NeedsRepair, HelpRequested, RepairManIsHere, BeingRepaired, RepairDone};

	enum State {Idle, WantToSleep, Sleeping, WantToCook, Cooking, FoodCooked, Eating, WantToEatAtRestaurant};
}
